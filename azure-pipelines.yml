# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- manual

pool:
  vmImage: ubuntu-20.04

steps:

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '$(mavenArgs) -Dmaven.test.failure.ignore=true'
    goals: 'clean package'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Dtest=FaresTest,SimpleTest'
    goals: 'surefire:test'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'cicdgen-sonar-svc-conn'
    scannerMode: 'MSBuild'
    projectKey: test-project'
    projectName: 'test-project'
    extraProperties: |
      sonar.host.url=http://40.85.146.106:9000/
      sonar.login=$(sonarqube.auth.token)
      # sonar.branch.name=$(Build.SourceBranchName)

- script: |
    mvn sonar:sonar -Dsonar.host.url=https://mysonarqubeurl \
      -Dsonar.login=$(sonarqube.auth.token) \
      -Dsonar.branch.name=$(Build.SourceBranchName)
  displayName: 'Run SonarQube analysis'

# - task: KubernetesToolInstaller@0
#   inputs:
#     kubernetesVersion: '1.18.6'
#     checkLatest: false

# - task: KubernetesManifest@0
#   inputs:
#     action: 'deploy'
#     kubernetesServiceConnection: 'myKubernetesServiceConnection'
#     namespace: 'default'
#     manifests: |
#       apiVersion: apps/v1
#       kind: Deployment
#       metadata:
#         name: myapp
#         labels:
#           app: myapp
#       spec:
#         replicas: 1
#         selector:
#           matchLabels:
#             app: myapp
#         template:
#           metadata:
#             labels:
#               app: myapp
#           spec:
#             containers:
#             - name: myapp
#               image: myregistry/myapp:$(Build.BuildId)
#               ports:
#               - containerPort: 8080
#     imagePullSecrets: 'myRegistryCreds'

