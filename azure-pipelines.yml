# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- manual

pool:
  vmImage: ubuntu-18.04

steps:

- script: |
    sudo mvn clean install -U
    sudo apt-get install -y libstdc++6
    export MAVEN_OPTS="-Djavax.xml.bind.JAXBContextFactory=com.sun.xml.bind.v2.ContextFactory -Djavax.xml.accessExternalSchema=all"
    sudo chmod -R 777 target
  displayName: 'Install dependencies and set environment variables'


- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'Sonarqube'
    scannerMode: 'Other'
    extraProperties: |
      mvn sonar:sonar \
        -Dsonar.projectKey=myshuttle \
        -Dsonar.host.url=http://40.85.146.106:9000/ \
        -Dsonar.login=e9ceff7d2faf3b986f070cd9cdb363a6ff0a691f


- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    options: '-Dtest=FaresTest,SimpleTest'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    testRunTitle: 'Junit'
    codeCoverageToolOption: 'JaCoCo'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: 'latest'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Visual Studio Enterprise Subscription – MPN(1abc6b47-3cb9-49d1-a93f-75de014a8e71)'
    azureContainerRegistry: '{"loginServer":"vkmyshuttlesample1.azurecr.io", "id" : "/subscriptions/1abc6b47-3cb9-49d1-a93f-75de014a8e71/resourceGroups/trial-rg/providers/Microsoft.ContainerRegistry/registries/vkmyshuttlesample1"}'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Build services'

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Visual Studio Enterprise Subscription – MPN(1abc6b47-3cb9-49d1-a93f-75de014a8e71)'
    azureContainerRegistry: '{"loginServer":"vkmyshuttlesample1.azurecr.io", "id" : "/subscriptions/1abc6b47-3cb9-49d1-a93f-75de014a8e71/resourceGroups/trial-rg/providers/Microsoft.ContainerRegistry/registries/vkmyshuttlesample1"}'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Run services'

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Visual Studio Enterprise Subscription – MPN(1abc6b47-3cb9-49d1-a93f-75de014a8e71)'
    azureContainerRegistry: '{"loginServer":"vkmyshuttlesample1.azurecr.io", "id" : "/subscriptions/1abc6b47-3cb9-49d1-a93f-75de014a8e71/resourceGroups/trial-rg/providers/Microsoft.ContainerRegistry/registries/vkmyshuttlesample1"}'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Push services'

# - task: TerraformInstaller@1
#   inputs:
#     terraformVersion: 'latest'
# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: 'IAC AWS'
#     backendServiceArm: 'Visual Studio Enterprise Subscription – MPN(c1ee46e4-4aef-4737-b2eb-1cdd090f891b)'
#     backendAzureRmResourceGroupName: 'DefaultResourceGroup-EA'
#     backendAzureRmStorageAccountName: 'myshuttle01'
#     backendAzureRmContainerName: 'myshuttle'
#     backendAzureRmKey: 'terraform.tfstate'

# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'validate'
#     workingDirectory: 'IAC AWS'

# - task: TerraformTaskV4@4
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: 'IAC AWS'
#     environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription – MPN(c1ee46e4-4aef-4737-b2eb-1cdd090f891b)'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo "changing Directory"
      cd $(System.DefaultWorkingDirectory)/IAC AWS
      echo "Showing PWD"
      pwd
      echo "Showing list of resources"
      ls -latr

- task: CopyFiles@2
  inputs:
    SourceFolder: 'IAC AWS'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'